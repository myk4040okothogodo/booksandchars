import React, { useEffect,useCallback, useState } from 'react'
import { useFocusEffect } from "@react-navigation/native";
import {connect} from "react-redux";
import {getBooks, getCharacters} from "../stores/bookzandcharz/bookActions";
import { Icon, VStack, useColorModeValue, Fab } from 'native-base'
import { AntDesign } from '@expo/vector-icons'
import AnimatedColorBox from '../components/animated-color-box'
import TaskList from '../components/task-list'
import shortid from 'shortid'
import Masthead from '../components/masthead'
import NavBar from '../components/navbar'
import Actions from '../components/actions'


const MainScreen = ({getBooks, myBooks}) => {
  const [data, setData] = useState([])
  const [editingItemId, setEditingItemId] = useState<string | null>(null)

{/*
  useEffect(
    React.useCallback(() => {
        getBooks()
      }, [])
  )
  */}
  
  useEffect(
    () => {
        getBooks()
        setData((data) => {
  for (var i=0; i< myBooks.length; i++){
     data.push({id: shortid.generate(), subject:myBooks[i].name, done: false})}
     });
     },[])
 
  const handleToggleTaskItem = useCallback(item => {
    setData(prevData => {
      const newData = [...prevData]
      const index = prevData.indexOf(item)
      newData[index] = {
        ...item,
        done: !item.done
      }
      return newData
    })
  }, [])
  const handleChangeTaskItemSubject = useCallback((item, newSubject) => {
    setData(prevData => {
      const newData = [...prevData]
      const index = prevData.indexOf(item)
      newData[index] = {
        ...item,
        subject: newSubject
      }
      return newData
    })
  }, [])
  const handleFinishEditingTaskItem = useCallback(_item => {
    setEditingItemId(null)
  }, [])
  const handlePressTaskItemLabel = useCallback(item => {
    setEditingItemId(item.id)
  }, [])
  const handleRemoveItem = useCallback(item => {
    setData(prevData => {
      const newData = prevData.filter(i => i !== item)
      return newData
    })
  }, [])

  return (
    <AnimatedColorBox
      flex={1}
      bg={useColorModeValue('warmGray.50', 'primary.900')}
      w="full"
    >
      <Masthead
        title="u ar' reading..."
        image={
          require('../assets/green.jpg')}
      >
        <NavBar />
      </Masthead>
      <VStack
        flex={1}
        space={1}
        bg={useColorModeValue('warmGray.50', 'primary.900')}
        mt="-20px"
        borderTopLeftRadius="20px"
        borderTopRightRadius="20px"
        pt="20px"
      >
        <TaskList
          data={data}
          onToggleItem={handleToggleTaskItem}
          onChangeSubject={handleChangeTaskItemSubject}
          onFinishEditing={handleFinishEditingTaskItem}
          onPressLabel={handlePressTaskItemLabel}
          onRemoveItem={handleRemoveItem}
          editingItemId={editingItemId}
        />
      </VStack>
      <Fab
        position="absolute"
        renderInPortal={false}
        size="sm"
        icon={<Icon color="white" as={<AntDesign name="plus" />} size="sm" />}
        colorScheme={useColorModeValue('blue', 'darkBlue')}
        bg={useColorModeValue('blue.500', 'blue.400')}
        onPress={() => {
          const id = shortid.generate()
          setData([
            {
              id,
              subject: '',
              done: false
            },
            ...data
          ])
          setEditingItemId(id)
        }}
      />
     {/* <Actions  /> */}
    </AnimatedColorBox>
  )
}


function mapStateToProps(state){
  return {
    myBooks: state.booksReducer.myBooks,
   }
  }

function mapDispatchToProps(dispatch){
    return{
        getBooks: (orderBy) => {
            return dispatch(getBooks(orderBy))
          }
      }
  }  

export default connect(mapStateToProps, mapDispatchToProps)(MainScreen);
